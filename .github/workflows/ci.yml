name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: driver_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Django tests
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/driver_management_test
      run: |
        cd backend
        python manage.py test

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          frontend/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('frontend/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Install Flutter dependencies
      run: |
        cd frontend
        flutter pub get
    
    - name: Analyze Flutter code
      run: |
        cd frontend
        flutter analyze
    
    - name: Run Flutter tests
      run: |
        cd frontend
        flutter test

  admin-panel-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
    
    - name: Install dependencies
      run: |
        cd admin-panel
        npm ci
    
    - name: Run ESLint
      run: |
        cd admin-panel
        npm run lint
    
    - name: Run tests
      run: |
        cd admin-panel
        npm test -- --coverage --watchAll=false
    
    - name: Build project
      run: |
        cd admin-panel
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, admin-panel-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build backend image
      run: |
        docker build -t driver-management-backend ./backend
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install code quality tools
      run: |
        pip install black flake8 isort
    
    - name: Check Python code formatting
      run: |
        cd backend
        black --check .
        flake8 .
        isort --check-only .

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, admin-panel-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, admin-panel-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here